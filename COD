#include<iostream>
using namespace std;

class Nod_B_Arbore
{
    int *nr_nod, t, n;
    Nod_B_Arbore **d;
    bool frunza;

public:
    Nod_B_Arbore(int _t, bool _frunza)
    {
        t=_t;
        frunza=_frunza;
        nr_nod= new int[2*t-1];
        d=new Nod_B_Arbore *[2*t];
        n=0;
    }

    void adaugare(int x)
    {
        int i=n-1;
        if(frunza==true)
        {
            while(i>=0&&nr_nod[i]>x)
            {
                nr_nod[i+1]=nr_nod[i];
                i--;
            }
            nr_nod[i+1]=x;
            n=n+1;
        }
        else
        {
            while(i>=0 && nr_nod[i]>x)
                i--;
            if(d[i+1]->n == 2*t-1)
            {
                imp_fiu(i+1, d[i+1]);
                if(nr_nod[i+1]>x)
                    i++;
            }
            d[i+1]->adaugare(x);
        }
    }

    void imp_fiu(int i, Nod_B_Arbore *y)
    {
        Nod_B_Arbore *z=new Nod_B_Arbore(y->t, y->frunza);
        z->n=t-1;
        for(int j=0; j<t-1; j++)
            z->nr_nod[j]=y->nr_nod[j+t];
        if(y->frunza==false)
        {
            for(int j=0; j<t; j++)
                z->d[j]=y->d[j+t];
        }
        y->n=t-1;
        for(int j=n; j>=i+1; j--)
            d[j+1]=d[j];
        d[i+1]=z;
        for(int j=n-1; j>=i; j--)
        {
            nr_nod[j+1]=nr_nod[j];
        }
        nr_nod[i]=y->nr_nod[t-1];
        n=n+1;
    }

    int cautare_nod(int x)
    {
       int i=0;
       while(i<n && nr_nod[i]<x)
            i++;
        return i;
    }

    void sterge(int x)
    {
        int i=cautare_nod(x);
        if(i<n && nr_nod[i]==x)
        {
            if(frunza==true)
                sterge_frunza(i);
            else
                sterge_notfrunza(i);
        }
        else
        {
            if(frunza==true)
            {
                cout<<"Nodul "<<x<<" nu exista"<<endl;
            }
            bool ok;
            if(i==n)
                ok=true;
            else
                ok=false;

            if(d[i]->n<t)
                umple(i);
            if(ok==true && i>n)
                d[i-1]->sterge(x);
            else
                d[i]->sterge(x);
        }
    }

    void sterge_frunza(int i)
    {
        for(int j=i+1; j<n; j++)
            nr_nod[j-1]=nr_nod[j];
        n--;
    }

    void sterge_notfrunza(int i)
    {
        int x=nr_nod[i];
        if(d[i]->n>=t)
        {
            int predecesor=pred(i);
            nr_nod[i]=predecesor;
            d[i]->sterge(predecesor);
        }
        else
            if(d[i+1]->n>=t)
        {
            int succesor=suc(i);
            nr_nod[i]=succesor;
            d[i]->sterge(succesor);
        }
        else
        {
            uneste(i);
            d[i]->sterge(x);
        }
    }

    int pred(int i)
    {
        Nod_B_Arbore *crt=d[i];
        while(!crt->frunza)
            crt=crt->d[crt->n];
        return crt->nr_nod[crt->n-1];
    }

    int suc(int i)
    {
        Nod_B_Arbore *crt=d[i+1];
        while(!crt->frunza)
            crt=crt->d[0];
        return crt->nr_nod[0];
    }

    void umple(int i)
    {
        if(i!=0 && d[i-1]->n>=t)
            imp_pred(i);
        else
            if(i!=n && d[i+1]->n>=t)
                imp_suc(i);
        else
        {
            if(i!=n)
                uneste(i);
            else
                uneste(i-1);
        }
    }

    void imp_pred(int i)
    {
        Nod_B_Arbore *fiu=d[i];
        Nod_B_Arbore *frate=d[i-1];
        for(int j=fiu->n-1; j>=0; j--)
            fiu->nr_nod[j+1]=fiu->nr_nod[j];
        if(!fiu->frunza)
        {
            for(int j=fiu->n; j>=0; j--)
                fiu->d[j+1]=fiu->d[j];
        }
        fiu->nr_nod[0]=nr_nod[i-1];
        if(!fiu->frunza)
            fiu->d[0]=frate->d[frate->n];
        nr_nod[i-1]=frate->nr_nod[frate->n-1];
        fiu->n+=1;
        frate->n-=1;
    }

    void imp_suc(int i)
    {
        Nod_B_Arbore *fiu=d[i];
        Nod_B_Arbore *frate=d[i+1];
        fiu->nr_nod[fiu->n]=nr_nod[i];
        if(!fiu->frunza)
        {
            fiu->d[(fiu->n)+1]=frate->d[0];
        }
        nr_nod[i]=frate->nr_nod[0];
        for(int j=1; j<frate->n; j++)
            frate->nr_nod[j-1]=frate->nr_nod[j];
        if(!frate->frunza)
            for(int j=1; j<frate->n; j++)
            frate->d[j-1]=frate->d[j];
        fiu->n+=1;
        frate->n-=1;
    }

    void uneste(int i)
    {
        Nod_B_Arbore *fiu=d[i];
        Nod_B_Arbore *frate=d[i+1];
        fiu->nr_nod[t-1]=nr_nod[i];
        for(int j=0; j<frate->n; j++)
            fiu->nr_nod[j+t]=frate->nr_nod[j];
    if(!fiu->frunza)
        for(int j=0; j<=frate->n; j++)
        fiu->d[j+t]=frate->d[j];
    for(int j=i+1; j<n; j++)
        nr_nod[j-1]=nr_nod[j];
    for(int j=i+2; j<=n; j++)
        d[j-1]=d[j];
    fiu->n+=frate->n+1;
    n--;
    delete(frate);
    }

    void traversare()
    {
        int i;
        for(i=0; i<n; i++)
        {
            if(frunza==false)
                d[i]->traversare();
            cout<<" "<<nr_nod[i];
        }
        if(frunza==false)
            d[i]->traversare();
    }

    Nod_B_Arbore *cautare(int x)
    {
        int i=0;
        while(i<n && x>nr_nod[i])
        {
            i++;
        }
        if(nr_nod[i]==x)
            return this;
        if(frunza==true)
            return NULL;
        return d[i]->cautare(x);
    }

    friend class B_Arbore;
};

class B_Arbore
{
    Nod_B_Arbore *rad;
    int t;
public:
    B_Arbore(int _t)
    {
        rad=NULL; t=_t;
    }

    void traversare()
    {
        if(rad!=NULL)
            rad->traversare();
    }
    Nod_B_Arbore* cautare(int x)
    {
        if(rad==NULL)
            return NULL;
        else
            return rad->cautare(x);
    }
    void inserare(int x)
    {
        if(rad==NULL)
        {
            rad=new Nod_B_Arbore(t, true);
            rad->nr_nod[0]=x;
            rad->n=1;
        }
        else
        {
            if(rad->n==2*t-1)
            {
                Nod_B_Arbore *s=new Nod_B_Arbore(t, false);
                s->d[0]=rad;
                s->imp_fiu(0, rad);
                int i=0;
                if(s->nr_nod[0]<x)
                    i++;
                s->d[i]->adaugare(x);
                rad=s;
            }
            else
                rad->adaugare(x);
        }
    }

    void sterge(int x)
    {
        if(rad==NULL)
        {
            cout<<"Arborele este gol"<<endl;
            return;
        }
        rad->sterge(x);
        if(rad->frunza)
            rad=NULL;
        else
            rad=rad->d[0];
    }
};
int main()
{
    return 0;
}
